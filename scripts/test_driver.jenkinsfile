#!/usr/bin/env groovy

// Load the SPiFI library
@Library('SPiFI') _
 
// Configure Jenkins job properties
// logRotator - sets up the number of old runs to keep + how long
// disableConcurrentBuilds - disallow concurrent runs of the pipeline in Jenkins
// pipelineTriggers - set up triggers to run the pipeline (i.e., CRON schedule)
// parameters - configure parameters for the pipeline job.
properties([
    buildDiscarder(
        logRotator(daysToKeepStr: '90', numToKeepStr: '30', artifactDaysToKeepStr: '', artifactNumToKeepStr: '')
    ),
    disableConcurrentBuilds(),
    parameters([ booleanParam(name: 'DryRun', defaultValue: false,
                              description: '''dry-run mode: echo commands but don't run anything'''),
                 booleanParam(name: 'CleanWorkspace', defaultValue: false,
                              description: '''Optionally clean the workspace before entering the pipeline.'''),
                 stringParam(name: 'EmailReplyTo', defaultValue: "bartv@sandia.gov",
                             description: '''Reply-To email address for generated status messages.'''),
                 stringParam(name: 'EmailDevOps',  
                             defaultValue: "wcmclen@sandia.gov dmvigi@sandia.gov bartv@sandia.gov",
                             description: '''Email list for dev-ops team.  Separate multiple email addresses using spaces.''')
               ])
])
//     pipelineTriggers([cron('0 23 * * *')]),
  
  
// Create state variables for the Parameters.
// - You can control parameters in a Jenkinsfile using the "properties" block above,
//   but Jenkins won't know about the parameter until it runs once.  To avoid errors,
//   it's useful to create separate state variables with defaults for that first run
//   where the parameter won't exist.
Boolean do_clean_workspace = false
Boolean do_dry_run = true
String email_devops = "wcmclen@sandia.gov"
String email_replyto   = "wcmclen@sandia.gov"
  
// If the parameter exists, set the values.
if(params.containsKey("DryRun"))
{
    do_dry_run = params.DryRun;
}
if(params.containsKey("EmailReplyTo"))
{
    email_replyto = params.EmailReplyTo
}
if(params.containsKey("EmailDevOps"))
{
    email_devops = params.EmailDevOps
}
if(params.containsKey("CleanWorkspace"))
{
    do_clean_workspace = params.CleanWorkspace
}
  
// Create other variables that we wish to keep around to pass information
// across stages.
String pipeline_status = "SUCCESS"
String email_body = "<H1>Summary</H1>"

 
// Restrict the pipeline to rhel6 or rhel7 nodes
node("RHEL6")
{
    timestamps 
    {
        Boolean quit=false
  

        // Clean the workspace if requested.
        stage("Cleanup")
        {
            println "\u25B6\n\u25B6 Stage: Cleanup\n\u25B6"
           
            if(do_clean_workspace)
            {
                cleanWs()
            }
        } // end Stage: cleanup

  

        // Run the tests
        stage("Run Tests")
        {
            println "\u25B6\n\u25B6 Stage: Run Tests\n\u25B6"

            def shell = new gov.sandia.sems.spifi.Shell()

            shell.execute(env: this, command: "ls -ltrhF")
            shell.execute(env: this, command: 'echo ${WORKSPACE}')
        
            // Update the email_body with HTML tables
            email_body += "<H3>Stage: Run Tests</H3>\n"        
        
            if(pipeline_status=="SUCCESS")
            {
                // Instantiate a ParallelJobLauncher
                def launcher = new gov.sandia.sems.spifi.ParallelJobLauncher(this)
 
                // Add some jobs to run
                launcher.appendJob(label: "B&T-RHEL6", 
                                   job_name: "milo_test_RHEL6_gcc6-1-0_omp1-10-0_boost1-63-0",
                                   dry_run: do_dry_run,
                                   dry_run_status: "SUCCESS",
                                   dry_run_delay: 20)
            
                // rhel7 is not stable -- there just aren't enough available build slaves to run this reliably.
                //launcher.appendJob(label: "B&T-RHEL7", job_name: "milo_test_RHEL7_gcc6-1-0_omp1-10-0_boost1-63-0")
 
                // Pretty Print the list of jobs to console output
                launcher.printJobList()
 
                // Launch the jobs and save the results
                def results = launcher.launchInParallel()
 
                // Get the summary stats of the run
                def summary = launcher.getLastResultSummary()
  
                // Print out ASCII tables of the run.
                def results_util = new gov.sandia.sems.spifi.ResultsUtility(env: this)
 
                // Print out the summary table to the Jenkins console (i.e., NUMJOBS, NUMSUCCESS, NUMFAILURE, etc.)
                println results_util.genResultSummaryTable(format: "ASCII", summary: summary)
  
                // Print out the details table of the job that ran.
                // This provides the status of the individual jobs, etc.
                println results_util.genResultDetailTable(format: "ASCII", results: results)
  
                email_body += results_util.genResultDetailTable(format: "HTML", results: results)
            
                // If all jobs didn't pass, update the pipeline_status var
                if(summary.NUMJOBS != summary.NUMSUCCESS)
                {
                    pipeline_status = 'FAILURE'
                }
            } 
            else
            {
                println "Stage skipped due to prior failure in pipeline"
                email_body += "Stage skipped due to prior failure in pipeline\n"
            }
        }  // end stage: Run Tests
  
  
        // Email the results to DevOPS
        stage("Notify")
        {
            println "\u25B6\n\u25B6 Stage: Notify\n\u25B6"

            // Set up email subject and prepend a header to the email based on status.
            String email_subject = "MILO Testing Results: SUCCESS"
            if("SUCCESS" != pipeline_status)
            {
                email_subject = "MILO Testing Results: FAILURE"
                email_body = "<H1>Testing Result: FAILURE</H1>\n" + email_body
            }
            else
            {
                email_body = "<H1>Testing Result: SUCCESS</H1>\n" + email_body
            }
         
            // Set the Jenkins pipeline status.
            // Note: This must be one of:  SUCCESS, FAILURE, UNSTABLE, ABORTED, NOT_BUILT
            currentBuild.result = pipeline_status
  
            // Create a SPiFI HTMLUtility object to generate the html document for emailing.
            html_util = new gov.sandia.sems.spifi.HTMLUtility(env: this)
  
            // Send the email using Jenkins' email utility.
            mail to:       email_devops,
                 replyTo:  email_replyto,
                 subject:  email_subject,
                 body:     html_util.generate(body: email_body),
                 mimeType: "text/html"
        }  // end stage: Notify
  
    } // end timestamps

}  // end node()




